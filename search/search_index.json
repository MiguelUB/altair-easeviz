{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#overview","title":"Overview","text":"<p>This Python library is dedicated to providing resources for Vega-Altair, with the aim of enhancing the creation of improved and more accessible graphs. The development of this library involved a thorough exploration of both the Altair and Vega-Lite APIs.</p> <p>For programmers, the library offers a suite of tools, including utilities for crafting new Vega-Altair themes, pre-built accessible themes, and description generators (Powered by BrailleR).</p> <p>From a user perspective, the library facilitates limited customization of the graph, allowing choices such as color scheme selection, text size adjustment, and graph size modification. This is due to a function that creates an HTML using a chart as a parameter.</p> <p>The overarching concept behind the library mirrors that of Vega-Altair, the majority of graph configurations and details are seamlessly managed by the library, affording users more time to focus on their data. It is important to note that the library does not modify any fundamental concepts, functions, or APIs of Vega-Altair; instead, it enriches the toolkit with additional resources.</p> <p>This documentation serves as a reference for the resources available post-installation and aims to provide insights into creating accessible graphs.</p>"},{"location":"#installation","title":"Installation","text":"<p>The library and its dependencies can be easily installed, using:</p> <pre><code>pip install altair-easeviz\n</code></pre> <p>After installation, the next built-in themes should be ready to use:</p> <ul> <li>accessible_theme</li> <li>dark_accessible_theme</li> <li>filler_pattern_theme</li> <li>print_theme</li> </ul> <p>You can enable them, using:</p> <pre><code>import altair as alt\n\nalt.themes.enable(\"accessible_theme\")\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<p>The library was built for:</p> <ul> <li>altair==5.* -</li> <li>typing-extensions&gt;=4.0, &lt;5</li> <li>jinja2==3.*</li> <li>pyRserve&gt;=1.0.*</li> </ul> <p>Also, in order to use the function generate_description() is necessary to have R running in the background, and have installed the libraries:</p> <ul> <li>BrailleR</li> <li>ggplot2</li> <li>Rserve</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<p>You can browse this documentation via the links in the top navigation panel or by viewing the API page. In addition to reading this documentation page, it can be helpful to also browse the source code of this project.</p> <p>The code source is available in GitHub where you can report any bugs or request features.</p>"},{"location":"#project-philosophy","title":"Project Philosophy","text":"<p>This project has the same approach as the Vega-Altair library that is a simple user interface that focuses most of the resources on an experience ready to use after installation, but with the possibility to still be abel to create something more complex and complete.</p>"},{"location":"p1-user_guide/","title":"User Guide","text":""},{"location":"p1-user_guide/#enabling-a-theme","title":"Enabling a theme","text":"<p>Enabling the themes that come with this library is as easy to just enable them with altair, then you can create your chart as you want the available themes in this library are:</p> <ul> <li>accessible_theme</li> <li>dark_accessible_theme</li> <li>filler_pattern_theme</li> <li>print_theme</li> </ul> <pre><code>import altair as alt\nimport pandas as pd\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#customizing-a-built-in-theme","title":"Customizing a built-in theme","text":"<p>Each theme comes from the ModelTheme defined in this library API, so you only need to instance the model and call the functions defined to make little customizations to the theme, then enable the theme, like this where we change the background color to orange:</p>"},{"location":"p1-user_guide/#changing-background-color","title":"Changing background color","text":"<pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz.models import AccessibleTheme\n\n# Changing background color of the accessible_theme\naccessible_theme = AccessibleTheme()\naccessible_theme.change_background_color('orange')\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre>"},{"location":"p1-user_guide/#changing-mark-color","title":"Changing mark color","text":"<p>This changes the bar, line, path, points, rect, rule, shape marks. This example changes the color of the marks to purple.</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz.models import AccessibleTheme\n\naccessible_theme = AccessibleTheme()\naccessible_theme.change_mark_color('purple')\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nchart = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#changing-text-color","title":"Changing text color","text":"<p>Change the color of the title, legend, axis, texts. This example changes the text color to purple.</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz.models import AccessibleTheme\n\naccessible_theme = AccessibleTheme()\naccessible_theme.change_text_color('purple')\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nchart = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#changing-line-color","title":"Changing line color","text":"<p>Change the color of axis ticks and grid lines. This example changes the line colors to red and shows the grid.</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz.models import AccessibleTheme\n\naccessible_theme = AccessibleTheme()\naccessible_theme.change_grid_show()\naccessible_theme.change_color_line('red')\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nchart = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#increasing-font-size","title":"Increasing font size","text":"<p>Increase all the font sizes used by a given number.</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz.models import AccessibleTheme\n\naccessible_theme = AccessibleTheme()\naccessible_theme.increase_font_size(20)\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nchart = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#decreasing-font-size","title":"Decreasing font size","text":"<p>Decrease all the font sizes used by a given number, if font size reaches zero, the text is no longer visible.</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz.models import AccessibleTheme\n\naccessible_theme = AccessibleTheme()\naccessible_theme.decrease_font_size(20)\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nchart = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#change-categorical-color-schemes","title":"Change categorical color schemes","text":"<p>Change the default scale of all charts that use a color parameter when encoding the chart and are shown by category.</p> <p>If you set a scale like in Vega-Altair,  this scale has priority over this default color scheme.</p> <pre><code>import altair as alt\nimport pandas as pd\n\nfrom altair_easeviz.models import AccessibleTheme\n\naccessible_theme = AccessibleTheme()\naccessible_theme.change_categorical_scheme(['red', 'yellow', 'green'])\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    \"Category\": list(\"AAABBBCCC\"),\n    \"Group\": list(\"xyzxyzxyz\"),\n    \"Value\": [0.1, 0.6, 0.9, 0.7, 0.2, 1.1, 0.6, 0.1, 0.2]\n})\n\nchart = alt.Chart(source).mark_bar().encode(\n    x=\"Category:N\",\n    y=\"Value:Q\",\n    xOffset=\"Group:N\",\n    color=\"Group:N\"\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#change-sequential-color-schemes","title":"Change sequential color schemes","text":"<p>Change the default scale of all charts that use a color parameter when encoding the chart are shown by sequence.</p> <p>If you set a scale like in Vega-Altair,  this scale has priority over this default color scheme.</p> <pre><code>import altair as alt\nfrom altair_easeviz.models import AccessibleTheme\nfrom vega_datasets import data\n\naccessible_theme = AccessibleTheme()\naccessible_theme.change_sequential_scheme(['green', '#008000', '#00f200', '#00ff21', '#00ff64'])\n\nalt.themes.enable('accessible_theme')\n\ncars = data.cars()\n\nchart = alt.Chart(cars).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color=alt.Color('Acceleration')\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#creating-a-new-theme","title":"Creating a new theme","text":""},{"location":"p1-user_guide/#vega-altair-way-of-defining-a-theme","title":"Vega-altair way of defining a theme","text":"<p>Creating a new theme is a built-in function in vega-altair all that is needed it is a function that returns a dict object with the appropriate keys and values defined in vega-lite, then register the theme and finally enable it</p> <pre><code>import altair as alt\nfrom vega_datasets import data\n\n\n# define the theme by returning the dictionary of configurations\ndef black_marks():\n    return {\n        'config': {\n            'view': {\n                'height': 300,\n                'width': 300,\n            },\n            'mark': {\n                'color': 'black',\n                'fill': 'black'\n            }\n        }\n    }\n\n\n# register the custom theme under a chosen name\nalt.themes.register('black_marks', black_marks)\n\n# enable the newly registered theme\nalt.themes.enable('black_marks')\n\n# draw the chart\ncars = data.cars.url\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\n</code></pre> <p></p>"},{"location":"p1-user_guide/#acceessilbe-theme-way-of-defining-a-theme","title":"Acceessilbe-theme way of defining a theme","text":"<p>However, in this library we use a more direct and organized method; in this library there are several models defined that correspond to what the vega-lite API expects. A simple example would be like this.</p> <pre><code>import altair as alt\nfrom vega_datasets import data\nfrom altair_easeviz.models import AxisModel, ConfigModel\n\n# Create a new dictionary with the configurations for the axis\naxis_config = AxisModel(labelColor='#e7212f', titleColor='#e7212f').create_axis()\n\n# Create a new dictionary of configurations\nred_text_axis = ConfigModel(axis=axis_config).create_config()\n\n\n# Define the theme by return the dictionary with the configurations\ndef red_axis_theme():\n    return red_text_axis\n\n\n# register the custom theme under a chosen name\nalt.themes.register('red_axis_theme', red_axis_theme)\n\n# enable the newly registered theme\nalt.themes.enable('red_axis_theme')\n\n# draw the chart\ncars = data.cars.url\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\n</code></pre> <p></p> <p>You can also just use the ModelTheme for a quicker and simpler theme. In this example, we create a theme with purple dots and black background</p> <pre><code>import altair as alt\nfrom altair_easeviz.models import ModelTheme\nfrom vega_datasets import data\n\n# Create theme (name_theme, text_color, axis_color, mark_color, background_color, show_grid)\npurple_theme = ModelTheme('purple_theme', 'white', 'purple', 'purple', 'black', True)\n\n# Register and enable theme\nalt.themes.register(purple_theme.getName(), purple_theme.get_theme)\nalt.themes.enable(purple_theme.getName())\n\n# draw the chart\ncars = data.cars.url\nchart = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\n</code></pre> <p></p> <p>Check the API page for more information about the available models</p>"},{"location":"p1-user_guide/#creating-an-accessible-chart-for-the-user","title":"Creating an accessible chart for the user","text":"<p>The library comes with a function called create_accessible_scheme() that uses jinja2 and a custom template where it is expected the chart to render.</p> <p>This function will use the chart to create a new HTML with options for the user to custom the graph such as</p> <ul> <li>Changing the categorical default color scheme, but does not change the sequential schemes like in a heatmap</li> <li>Increase/Decrease the font size</li> <li>Adjust the height and width</li> <li>Show chart description on screen and add it in aria label if a description is given</li> </ul> <p>It has a limitation since it does not fully support compound charts</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz import create_accessible_scheme\n\nsource = pd.DataFrame({\n    \"Category\": list(\"AAABBBCCC\"),\n    \"Group\": list(\"xyzxyzxyz\"),\n    \"Value\": [0.1, 0.6, 0.9, 0.7, 0.2, 1.1, 0.6, 0.1, 0.2]\n})\n\nbase = alt.Chart(source).mark_bar().encode(\n    x=\"Category:N\",\n    y=\"Value:Q\",\n    xOffset=\"Group:N\",\n    color=\"Group:N\"\n)\n# Creates a HTML named bar-chart.HTML\ncreate_accessible_scheme(base, 'bar-chart',\n                         'This is bar chart description written by hand, here you can describe details of the chart for screen readers or people low vision')\n</code></pre> <p></p>"},{"location":"p1-user_guide/#using-filler-pattern","title":"Using Filler Pattern","text":"<p>Filler patterns is a god way to help people with vision problems; we can use this feature with our create_accessible_scheme() function since the template that uses is charge with various color patterns at our disposal,  we only need to set them as our categorical color scheme. We use an object that is related to the color in some of our color patterns, since it is a god way to help understand what color is looking</p> <p>Here is an example where we change the color scheme categorical of one of our themes, the theme filler_pattern_theme has these loaded by default</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz import create_accessible_scheme\nfrom altair_easeviz.models import AccessibleTheme\n\naccessible_theme = AccessibleTheme()\naccessible_theme.change_categorical_scheme(\n    [\"url(#red-heart)\", \"url(#blue-rain)\", \"url(#green-leaf)\", \"url(#purple-grapes)\", \"url(#orange-orange)\",\n     \"url(#yellow-star)\", \"url(#brown-chocolate)\", \"url(#pink-donut)\", \"url(#grey-wrench)\"])\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    \"Category\": list(\"AAABBBCCC\"),\n    \"Group\": list(\"xyzxyzxyz\"),\n    \"Value\": [0.1, 0.6, 0.9, 0.7, 0.2, 1.1, 0.6, 0.1, 0.2]\n})\n\nchart = alt.Chart(source).mark_bar().encode(\n    x=\"Category:N\",\n    y=\"Value:Q\",\n    xOffset=\"Group:N\",\n    color=\"Group:N\"\n)\ncreate_accessible_scheme(chart, 'patterns')\n</code></pre> <p></p> <p>You can all the patterns available in the API</p>"},{"location":"p1-user_guide/#generate-description-of-a-graph","title":"Generate description of a graph","text":"<p>The function generate_description() creates a description for a given chart, this is thanks to the library BrailleR. But in order to be able to use this function is necessary to understand its requirements and limitations</p> <p>The most important requirement is to have R running in the background were we must have installed the next libraries</p> <ul> <li>Rserve, this is the key library we use as a bridge between Python and R</li> <li>ggplot2, we use this to recreate the chart of Vega-Altair</li> <li>BrailleR, this is the core library that creates the descriptions of the chart</li> </ul> <p>After you have all the libraries installed, the last step is to run</p> <pre><code>library(Rserve)\nRserve()\n</code></pre> <p>About the limitations of this function, that would be the number of charts available to run and the complexity of these. As the current version, we only count with these:</p> <ul> <li>barchart</li> <li>linechart</li> <li>scatterplot</li> <li>piechart</li> </ul> <p>Here is an example:</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz import create_accessible_scheme, generate_description\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nbase = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n# Generate description of the chart\ndescription = generate_description(base, 'barchart', source['a'].tolist(), source['b'].tolist())\n# The functions return a dict with the key 'error' if any exceptions were throw and 'res' with the generated description\ndescription = description['res'] if 'res' in description else description['error']\n\n# We render the description in an HTML \ncreate_accessible_scheme(base, 'proba', description)\n</code></pre> <p></p>"},{"location":"p2-api/","title":"Api","text":"<p>Within this page, you will discover comprehensive specifications and intricacies regarding the models utilized and the functions created. It is advisable, however, to reference the \"Getting Started\" and \"Examples\" sections for a more streamlined comprehension of the library. These sections provide practical insights and usage scenarios that can significantly enhance your understanding of the library's functionality and facilitate a smoother initiation process.</p>"},{"location":"p2-api/#models","title":"Models","text":"Model Description ModelTheme This models contains a Config model, some basic variables of color and functions to change the theme. ConfigModel A model with the main purpose is to hold and create a dict to hold all vega-lite specification, uses other models to be constructed. AxisModel Model that contains some of the parameters of the 'axis' in  vega-lite specification HeaderModel Model that contains some of the parameters of the 'header' in  vega-lite specification LegendModel Model that contains some of the parameters of the 'legend' in  vega-lite specification MarkModel Model that contains some of the parameters of the 'axis' in  vega-lite specification RangeModel Model that contains 'category','diverging', 'heatmap' and 'ramp' parameters of the 'range' in  vega-lite specification TitleModel Model that contains some of the parameters of the 'title' in  vega-lite specification ViewModel Model that contains some of the parameters of the 'view' in  vega-lite specification"},{"location":"p2-api/#modeltheme","title":"ModelTheme","text":"<p><code>class altair_easeviz.models.ModelTheme(name_theme: str, text_color: str, axis_color: str, mark_color: str,background_color: str, grid: bool)</code></p> <p>This model helps to create easy new themes for Vega-Altair, it is with this model that we create the 4 themes we included.</p> <p>Parameters:</p> <p>name_theme : str</p> <p>The name that be registered in the altair.themes</p> <p>text_color : str, HexColor,ColorName</p> <p>Define the color of all the text of the chart included the mark Text</p> <p>axis_color:  str, HexColor,ColorName</p> <p>Define the color of the grid, axis and mark Lines of the chart</p> <p>mark_color: str, HexColor,ColorName</p> <p>Define the color of all marks in the chart</p> <p>background_color:str, HexColor,ColorName</p> <p>Define the color of the background of the chart</p> <p>grid: bool</p> <p>Define if the chart will show its grid or not</p> <p>colors: Colors, dict</p> <p>A dict that holds all the colors used in the model arc,axis,background,text,mark,scheme{categorical,diverging,sequential}</p> <p>font_size: dict</p> <p>Holds the three sizes we use in the graph, is used to give a hierarchy order size to the text</p> <p>spacing: dict</p> <p>Holds the three sizes we use in the graph for spacing</p> <p>config: dict</p> <p>Creates a ConfigModel and holds dict with all the configurations described below following the vega-lite specification</p> <p>axis_config: Axis, dict</p> <p>Create and holds dict of type Axis describe it in types</p> <p>header_config: Header, dict</p> <p>Create and hold dict of type Header describe it in types</p> <p>legend_config: Legend, dict</p> <p>Create and holds dict of type Legend describe it in types</p> <p>title_config: Title, dict</p> <p>Create and hold dict of type Title describe it in types</p> <p>view_config: View, dict</p> <p>Create and hold dict of type View describe it in types</p> <p>range_config: ScaleRange, dict</p> <p>Create and hold dict of type ScaleRange describe it in types</p> <p>arc_config: Mark, dict</p> <p>Create and holds dict of type Mark describe it in types</p> <p>bar_config: Mark, dict</p> <p>Create and hold dict of type Mark describe it in types</p> <p>line_config: Mark, dict</p> <p>Create and hold dict of type Mark describe it in types</p> <p>path_config: Mark, dict</p> <p>Create and hold dict of type Mark describe it in types</p> <p>point_config: Mark, dict</p> <p>Create and hold dict of type Mark describe it in types</p> <p>rect_config: Mark, dict</p> <p>Create and hold dict of type Mark describe it in types</p> <p>rule_config: Mark, dict</p> <p>Create and hold dict of type Mark describe it in types</p> <p>shape_config: Mark, dict</p> <p>Create and hold dict of type Mark describe it in types</p> <p>text_config: Mark, dict</p> <p>Create and hold dict of type Mark describe it in types</p> <p>Functions:</p> Function Description get_theme() It returns a dict with all the config like the parameter config in the vega-lite specification get_name() Return the name of the theme change_background_color() Change the background color and re register the theme in Vega-Altair with the same name_theme change_mark_color() Change the mark color and re register the theme in Vega-Altair with the same name_theme change_text_color() Change the text color and re register the theme in Vega-Altair with the same name_theme increase_font_size(number:int) Increases all values in font_size by the number given  and re register the theme in Vega-Altair with the same name_theme decrease_font_size(number:int) Decreases all values in font_size by the number given  and re register the theme in Vega-Altair with the same name_theme change_categorical_scheme(scheme:List[str]) Replaces the list in colors['categorical'] by the given scheme  and re register the theme in Vega-Altair change_sequential_scheme(scheme:List[str]) Replaces the list in colors['sequential'] by the given scheme  and re register the theme in Vega-Altair change_color_line(color_line) Replaces the value in colors['axis'] that define the color of the grid and axis lines and re register the theme in Vega-Altair change_grid_show() Switch between tru or false if the grid is show"},{"location":"p2-api/#configmodel","title":"ConfigModel","text":"<p><code>class altair_easeviz.models.ConfigModel(**kwargs)</code></p> <p>The configuration model, resembling other models outlining the vega-lite specification, utilizes keyword arguments ( kwargs) to accommodate an arbitrary number of parameters, should the need arise. However, in consideration of the Config type and the presumption that developers may not explicitly define each parameter, the model inherently incorporates a predetermined set of default parameters.</p> <p>Parameters:</p> <p>_required_params: dict</p> <p>A dict that holds in keys the variables we use in this model and in the value holds the type that uses the variable this was meant to check if the kwargs passed were equal.</p> <p>axis : dict</p> <p>A dict that holds keys and values of the axis parameter valids in the vega-lite specification</p> <p>legend : dict</p> <p>A dict that holds keys and values of the legend parameter valids in the vega-lite specification</p> <p>range : dict</p> <p>A dict that holds keys and values of the range parameter valids in the vega-lite specification</p> <p>background : str</p> <p>A string that holds the value of the background of the chart</p> <p>header : dict</p> <p>A dict that holds keys and values of the header parameter valids in the vega-lite specification</p> <p>title : dict</p> <p>A dict that holds keys and values of the title parameter valids in the vega-lite specification</p> <p>view : dict</p> <p>A dict that holds keys and values of the view parameter valids in the vega-lite specification</p> <p>Functions:</p> Function Description create_config() A function that uses all the parameters describe in _required_params and creates a Config type(dict) and return it create_full_config() A function that uses all the parameters passed i the kwargs and creates a Config type(dict) and return it str() It return a string of the function create_full_config()"},{"location":"p2-api/#axismodel","title":"AxisModel","text":"<p><code>class altair_easeviz.models.AxisModel(**kwargs)</code></p> <p>A model to hold all related axis parameters</p> <p>Parameters:</p> <p>_required_params: dict</p> <p>A dict that holds in keys the variables we use in this model and in the value holds the type that uses the variable this was meant to check if the kwargs passed were equal.</p> <p>domain : bool</p> <p>A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.</p> <p>domain: str, ColorName, HexColor</p> <p>Color of axis domain line.</p> <p>domainColor : str, HexColor,ColorName</p> <p>Color of axis domain line.</p> <p>grid: bool</p> <p>A boolean flag indicating if grid lines should be included as part of the axis</p> <p>gridCap: str</p> <p>The stroke cap for grid lines\u2019 ending style. One of \"butt\", \"round\" or \"square\".</p> <p>gridColor : str, HexColor,ColorName</p> <p>Color of gridlines.</p> <p>gridDash:[[condition, value]]</p> <p>An array of alternating [stroke, space] lengths for dashed grid lines.</p> <p>gridWidth:float</p> <p>The grid width, in pixels.</p> <p>labelColor :str, HexColor,ColorName</p> <p>The color of the tick label can be in hex color code or regular color name.</p> <p>labelFont:str</p> <p>The font of the tick label.</p> <p>labelFontSize:int</p> <p>The font size of the tick labels.</p> <p>labelPadding:float</p> <p>The padding in pixels between labels and ticks.</p> <p>tickColor :str, HexColor,ColorName</p> <p>The color of the axis\u2019s tick.</p> <p>tickOpacity:float Opacity of the ticks. ticks:bool Boolean value that determines whether the axis should include ticks. tickSize:int The size in pixels of axis ticks. titleColor :str, HexColor,ColorName Color of the title, can be in hex color code or regular color name. titleFont:str Font of the title. (e.g., \"Helvetica Neue\" ). titleFontSize:int Font size of the title.</p> <p>Functions:</p> Function Description create_axis() A function that uses all the parameters describe in _required_params and creates a Axis type(dict) and returns it"},{"location":"p2-api/#headermodel","title":"HeaderModel","text":"<p><code>class altair_easeviz.models.HeaderModel(**kwargs)</code></p> <p>A model to hold all related header parameters</p> <p>Parameters:</p> <p>_required_params: dict</p> <p>A dict that holds in keys the variables we use in this model and in the value holds the type that uses the variable this was meant to check if the kwargs passed were equal.</p> <p>labelColor: str, HexColor,ColorName</p> <p>The color of the header label can be in hex color code or regular color name.</p> <p>labelFont: str</p> <p>The font of the header label.</p> <p>labelFontSize: int</p> <p>The font size of the header label, in pixels.</p> <p>titleColor: str, HexColor,ColorName</p> <p>Color of the header title can be in hex color code or regular color name.</p> <p>titleFont: str Font of the header title. (e.g., \"Helvetica Neue\" ).</p> <p>titleFontSize: int</p> <p>The font style of the header title.</p> <p>Functions:</p> Function Description create_header() A function that uses all the parameters describe in _required_params and creates a Header type(dict) and returns it"},{"location":"p2-api/#legendmodel","title":"LegendModel","text":"<p><code>class altair_easeviz.models.HeaderModel(**kwargs)</code></p> <p>A model to hold all related header parameters</p> <p>Parameters:</p> <p>_required_params: dict</p> <p>A dict that holds in keys the variables we use in this model and in the value holds the type that uses the variable this was meant to check if the kwargs passed were equal.</p> <p>labelColor: str, HexColor,ColorName</p> <p>The color of the legend label can be in hex color code or regular color name.</p> <p>labelFont: str</p> <p>The font of the legend label.</p> <p>labelFontSize: int</p> <p>The font size of legend label.</p> <p>symbolSize: int</p> <p>The size of the legend symbol, in pixels.</p> <p>titleColor: str, HexColor,ColorName</p> <p>The color of the legend title can be in hex color code or regular color name.</p> <p>titleFont: str</p> <p>The font of the legend title.</p> <p>titleFontSize: int</p> <p>The font size of the legend title.</p> <p>titlePadding: int</p> <p>The padding, in pixels, between title and legend.</p> <p>Functions:</p> Function Description create_legend() A function that uses all the parameters describe in _required_params and creates a Legend type(dict) and returns it"},{"location":"p2-api/#markmodel","title":"MarkModel","text":"<pre><code>class altair_easeviz.models.MarkArkModel(**kwargs)\nclass altair_easeviz.models.MarkBarModel(**kwargs)\nclass altair_easeviz.models.MarkLineModel(**kwargs)\nclass altair_easeviz.models.MarkLineModel(**kwargs)\nclass altair_easeviz.models.MarkPathModel(**kwargs)\nclass altair_easeviz.models.MarkPointModel(**kwargs)\nclass altair_easeviz.models.MarkRectModel(**kwargs)\nclass altair_easeviz.models.MarkRuleModel(**kwargs)\nclass altair_easeviz.models.MarkShapeModel(**kwargs)\nclass altair_easeviz.models.MarkTextModel(**kwargs)\n</code></pre> <p>A model to hold all related mark parameters. Unlike other models, the mark related models hold similar variables and all are the</p> <p>Parameters:</p> <p>_required_params: dict</p> <p>A dict that holds in keys the variables we use in this model and in the value holds the type that uses the variable this was meant to check if the kwargs passed were equal.</p> <p>color: str, HexColor,ColorName</p> <p>Default color. The fill and stroke properties have higher precedence than color and will override color.</p> <p>fill: str, HexColor,ColorName</p> <p>Default fill color.</p> <p>filled: bool</p> <p>Whether the mark\u2019s color should be used as fill color instead of stroke color.</p> <p>font: str</p> <p>The typeface to set the text in (e.g., \"Helvetica Neue\" ).</p> <p>fontSize: int</p> <p>The font size, in pixels.</p> <p>shape: str</p> <p>Shape of the point marks. Supported values include:</p> <ul> <li> <p>plotting shapes: \"circle\", \"square\", \"cross\", \"diamond\", \"triangle-up\", \"triangle-down\", \"triangle-right\", or \"   triangle-left\".</p> </li> <li> <p>the line symbol \"stroke\"</p> </li> <li> <p>centered directional shapes \"arrow\", \"wedge\", or \"triangle\"</p> </li> <li> <p>a custom SVG path string (For correct sizing, custom shape paths should be defined within a square bounding box with   coordinates ranging from -1 to 1 along both the x and y dimensions.)</p> </li> </ul> <p>stroke: str, HexColor,ColorName</p> <p>Default stroke color.</p> <p>strokeWidth: float</p> <p>The stroke width, in pixels.</p> <p>Functions:</p> <p>The function name varies in each model but follows a similar pattern. For example, for the MarkBarModel the function would be create_mark_bar().</p> Function Description create_name_mark() A function that uses all the parameters describe in _required_params and creates a Mark type( dict) and returns it"},{"location":"p2-api/#rangemodel","title":"RangeModel","text":"<p><code>class altair_easeviz.models.RangeModel(**kwargs)</code></p> <p>A model to hold all related header parameters</p> <p>Parameters:</p> <p>category: List(str, HexColor, ColorName)</p> <p>Default color scheme for categorical data.</p> <p>diverging: List(str, HexColor, ColorName)</p> <p>Default color scheme for diverging quantitative ramps.</p> <p>heatmap: List(str, HexColor, ColorName)</p> <p>Default color scheme for quantitative heatmaps.</p> <p>ramp: List(str, HexColor, ColorName)</p> <p>Default color scheme for sequential quantitative ramps.</p> <p>Functions:</p> Function Description create_range() A function that uses all the parameters describe in _required_params and creates a Range type(dict) and returns it"},{"location":"p2-api/#titlemodel","title":"TitleModel","text":"<p><code>class altair_easeviz.models.TitleModel(**kwargs)</code></p> <p>A model to hold all related title parameters</p> <p>Parameters:</p> <p>_required_params: dict</p> <p>A dict that holds in keys the variables we use in this model and in the value holds the type that uses the variable this was meant to check if the kwargs passed were equal.</p> <p>anchor: str</p> <p>The anchor position for placing the title and subtitle text. One of \"start\", \"middle\", or \"end\". For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title. Default \"star\"</p> <p>color: str, HexColor, ColorName</p> <p>Text color for title text.</p> <p>font: str</p> <p>Font name for title text.</p> <p>fontSize: int</p> <p>Font style for title text.</p> <p>fontWeight: str, \u2018normal\u2019, \u2018bold\u2019, \u2018lighter\u2019, \u2018bolder\u2019, 100, 200, 300, 400, 500, 600, 700, 800, 900</p> <p>Font weight for title text. This can be either a string (e.g \"bold\", \"normal\" ) or a number ( 100, 200, 300, \u2026, 900 where \"normal\" = 400 and \"bold\" = 700 ).</p> <p>offset: int</p> <p>The orthogonal offset in pixels by which to displace the title group from its position along the edge of the chart.</p> <p>subtitleColor: str, HexColor, ColorName</p> <p>Text color for subtitle text.</p> <p>subtitleFontSize: int</p> <p>Font size in pixels for subtitle text.</p> <p>Functions:</p> Function Description create_title() A function that uses all the parameters describe in _required_params and creates a Title type(dict) and returns it"},{"location":"p2-api/#viewmodel","title":"ViewModel","text":"<p><code>class altair_easeviz.models.ViewModel(**kwargs)</code></p> <p>A model to hold all related view parameters</p> <p>Parameters:</p> <p>_required_params: dict</p> <p>A dict that holds in keys the variables we use in this model and in the value holds the type that uses the variable this was meant to check if the kwargs passed were equal.</p> <p>continuousHeight: int</p> <p>The default height when the plot has a continuous y-field for x or latitude, or has arc marks. Default value: 300</p> <p>continuousWidth: int</p> <p>The default width when the plot has a continuous field for x or longitude, or has arc marks. Default value: 400</p> <p>stroke: str, HexColor, ColorName The stroke color.Defalut value: transparent</p> <p>Functions:</p> Function Description create_view() A function that uses all the parameters describe in _required_params and creates a View type(dict) and returns it"},{"location":"p2-api/#themes","title":"Themes","text":"<p>The themes provided in this library are based on the model ModelTheme where the only variations are the color used. The color schemes were inspired by the Color Brewer project and also check in WAIM contrast, so it follows the regulations of the WCAG2.0</p>"},{"location":"p2-api/#accessible_theme","title":"accessible_theme","text":"<p>The theme uses a white background with dark text and axis, the palette of colors consists of colors that vary its hue, so it can be distinguished</p> <pre><code>class AccessibleTheme(ModelTheme):\n    def __init__(self):\n        super().__init__('accessible_theme', COLOR_PRIMITIVES[\"black\"], COLOR_PRIMITIVES[\"black\"],\n                         COLOR_PRIMITIVES[\"blue\"]['30'], COLOR_PRIMITIVES[\"white\"], False)\n</code></pre>"},{"location":"p2-api/#dark_accessible_theme","title":"dark_accessible_theme","text":"<p>The theme uses a dark background with white text and axis enhancing that a light version the palette of colors uses a variation in illumination, so it can be distinguished</p> <pre><code>class DarkAccessibleTheme(ModelTheme):\n    def __init__(self):\n        super().__init__('dark_accessible_theme', COLOR_PRIMITIVES[\"white\"], COLOR_PRIMITIVES[\"white\"],\n                         COLOR_PRIMITIVES[\"blue\"]['30'], COLOR_PRIMITIVES[\"black\"], False)\n        self.change_categorical_scheme(COLORS[\"schemes\"]['categorical']['paired'])\n\n    def change_categorical_scheme(self, scheme: List[str]):\n        super().change_categorical_scheme(scheme)\n</code></pre>"},{"location":"p2-api/#filler_pattern_theme","title":"filler_pattern_theme","text":"<p>This theme uses a white background and dark text and axis, its particularity comes in is color palette, the color palette follows the same reason of changing its hue but also adds a filler pattern, so the marks can be more visible between themselves This is possible to do only with our [create_accessible_scheme()] function since it preloads svg in the HTML to be used</p> <pre><code>class FillerPatternTheme(ModelTheme):\n    def __init__(self):\n        super().__init__('filler_pattern_theme', COLOR_PRIMITIVES[\"black\"], COLOR_PRIMITIVES[\"black\"],\n                         COLOR_PRIMITIVES[\"blue\"]['30'], COLOR_PRIMITIVES[\"white\"], False)\n        self.change_categorical_scheme(\n            [\"url(#red-heart)\", \"url(#blue-rain)\", \"url(#green-leaf)\", \"url(#purple-grapes)\", \"url(#orange-orange)\",\n             \"url(#yellow-star)\", \"url(#brown-chocolate)\", \"url(#pink-donut)\", \"url(#grey-wrench)\", ])\n\n    def change_categorical_scheme(self, scheme: List[str]):\n        super().change_categorical_scheme(scheme)\n</code></pre>"},{"location":"p2-api/#print_friendly_theme","title":"print_friendly_theme","text":"<p>The theme is meant to work if the graph ever is printed and photocopied on a gray scale. Does not follow the WCAG2.0 regulations</p> <pre><code>class PrintFriendlyTheme(ModelTheme):\n    def __init__(self):\n        super().__init__('print_theme', COLOR_PRIMITIVES[\"black\"], COLOR_PRIMITIVES[\"black\"],\n                         COLOR_PRIMITIVES[\"blue\"]['30'], COLOR_PRIMITIVES[\"white\"], False)\n        self.change_categorical_scheme(COLORS[\"schemes\"]['categorical']['set3'])\n\n    def change_categorical_scheme(self, scheme: List[str]):\n        super().change_categorical_scheme(scheme)\n</code></pre>"},{"location":"p2-api/#top-level-functions","title":"Top-Level Functions","text":"<p>Our library beside the themes and models offers two functions that can come handy to make accessible chart faster</p>"},{"location":"p2-api/#create_accesible_scheme","title":"create_accesible_scheme()","text":"<p>This function works similar like the altair.Chart.save() function but offers more options for the user in the HTML being able to change the color palette, increase/decrease the font size and size of the chart. Also, will show a description if given in HTML. All this function also work with keyboard navigation so can be used for more people.</p> <pre><code>def create_accessible_scheme(chart: Chart, filename: str = 'test', description: str = None):\n</code></pre> <p>Parameters:</p> <p>chart : altair.Chart</p> <p>Any Chart object of Vega-Altair works to be rendered, but not all Charts can be used the functions described in the HTML these include LayerChart, HConcatChart, VConcatChart, FacetChart, RepeatChart.</p> <p>filename: str</p> <p>The name of the HTML to create</p> <p>description: str</p> <p>A description for the chart given, if given it will be included in the aria-label of the chart and shown in the HTML in a div</p>"},{"location":"p2-api/#generate_description","title":"generate_description()","text":"<p>This function can generate a description for a given chart, it's powered by BrailleR, so it has prerequisite to be used and that is to have R installed with the appropriate libraries It works recreating the chart in R, so it can only use simple charts</p> <pre><code>def generate_description(chart: Chart, type_chart: str, axis_x: List, axis_y: List):\n</code></pre> <p>Parameters:</p> <p>chart : altair.Chart</p> <p>Any Chart object of Vega-Altair works to be used</p> <p>type_chart : str, ['barchart','scatterplot', 'linechart','piechart']</p> <p>Define the type of Chart to be sent to R</p> <p>axis_x : List</p> <p>A list that contains the values of the X axis can be either str, int or float</p> <p>axis_y : List</p> <p>A list that contains the values of the X axis can be either str, int or float</p> <p>Return:</p> <p>It returns a dict object with either of the next keys:</p> <ul> <li>'res' It contains a string with a description of the chart</li> <li>'error' It contains the description of the exception that occurred</li> </ul>"},{"location":"p2-api/#color-schemes","title":"Color schemes","text":""},{"location":"p2-api/#color-palettes","title":"Color palettes","text":"<p>The following are the available color palettes in tokens these can be found in color brewer</p> <ul> <li>dark2</li> </ul> <p></p> <ul> <li>paired</li> </ul> <p></p> <ul> <li>set1</li> </ul> <p></p> <ul> <li>set3</li> </ul> <p></p>"},{"location":"p2-api/#color-patterns","title":"Color patterns","text":"<p>When using our function create_accesible_scheme() you can use any of the next patterns with the ID:</p> <p>This first batch of a pattern follows the technique of associatiing a color to an object; we choose the most simple color palette that contains the basic colors.</p> <ul> <li>red-heart</li> </ul> <p></p> <ul> <li>blue-rain</li> </ul> <p></p> <ul> <li>green-leaf</li> </ul> <p></p> <ul> <li>purple-grapes</li> </ul> <p></p> <ul> <li>orange-orange</li> </ul> <p></p> <ul> <li>yellow-star</li> </ul> <p></p> <ul> <li>brown-chocolate</li> </ul> <p></p> <ul> <li>pink-donut</li> </ul> <p></p> <ul> <li>grey-wrench</li> </ul> <p>This next batch contains different patterns not following any logic, these were provided by the Irine Rios patterns fills project and the color scheme behind is the same used in the accessible theme.</p> <p></p> <ul> <li>teal-vertical</li> </ul> <p></p> <ul> <li>orange-horizontal</li> </ul> <p></p> <ul> <li>purple-diagonal-rl</li> </ul> <p></p> <ul> <li>pink-diagonal-lr</li> </ul> <p></p> <ul> <li>green-dots-inv</li> </ul> <p></p> <ul> <li>yellow-circles</li> </ul> <p></p> <ul> <li>brown-cross</li> </ul> <p></p> <ul> <li>grey-houndstooth</li> </ul> <p></p>"},{"location":"p2-api/#tokens","title":"Tokens","text":"<p>The tokens python file contains resources of colors, font sizes, spacing sizes, color palettes, etc.</p> <p>A good example would be to import a color palette and use it in a chart</p> <pre><code>from altair_easeviz.tokens import COLORS\n\ncolor_palette = COLORS['schemes']['categorical']['ibm']  # Return a list of colors in HEX\n</code></pre>"},{"location":"p2-api/#types","title":"Types","text":"<p>Typing in python was used to ensure and give hints in future developments of what to expect in a variable a good example would be that we used this to highlight how a parameter in a vega-lite specification should have, does not affect the compiling process but helps to develop, the next is an example of what should have a Config type.</p> <pre><code>class Config(TypedDict, total=False):\n    \"\"\"Chart theme configuration.\"\"\"\n\n    axis: Axis\n    axisBand: Axis\n    axisY: Axis\n    legend: Legend\n    arc: Mark\n    bar: Mark\n    line: Mark\n    path: Mark\n    point: Mark\n    rect: Mark\n    rule: Mark\n    shape: Mark\n    text: Mark\n    range: ScaleRange\n    background: str\n    group: Mark\n    header: Header\n    title: Title\n    view: View\n</code></pre>"},{"location":"p3-examples/","title":"Examples","text":""},{"location":"p3-examples/#enable-altair-easeviz-theme","title":"Enable altair-easeviz theme","text":"<p>This example shows to enable any theme from altair-easeviz and use it in an altair.Chart</p> <p></p> <pre><code>import altair as alt\nimport pandas as pd\n\n# Enable Theme accessible_theme, dark_accessible_theme, filler_pattern_theme, print_theme\nalt.themes.enable('accessible_theme')\n\n# Define a Chart\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre>"},{"location":"p3-examples/#create-an-html-with-functions","title":"Create an HTML with functions","text":"<p>This example shows how to create a HTML with the function of our library, and this HTML will have some customization features. Be cautious that the features do not work in all the charts like composed charts(Concat, Repeat, etc.)</p> <p></p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz import create_accessible_scheme\n\n# Defining a chart\nsource = pd.DataFrame({\n    \"Category\": list(\"AAABBBCCC\"),\n    \"Group\": list(\"xyzxyzxyz\"),\n    \"Value\": [0.1, 0.6, 0.9, 0.7, 0.2, 1.1, 0.6, 0.1, 0.2]\n})\n\nbase = alt.Chart(source).mark_bar().encode(\n    x=\"Category:N\",\n    y=\"Value:Q\",\n    xOffset=\"Group:N\",\n    color=\"Group:N\"\n)\n\n# Creates an HTML named bar-chart.html\ncreate_accessible_scheme(base, 'bar-chart',\n                         'This is bar chart description written by hand, here you can describe details of the chart for screen readers or people low vision')\n</code></pre>"},{"location":"p3-examples/#generate-description-of-a-chart","title":"Generate description of a chart","text":"<p>This example shows how to generate a description of a Chart. Remember, in order to use this function have R running with appropriate libraries, check the user guide for more details.</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz import create_accessible_scheme, generate_description\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nbase = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n# Generate description of the chart\ndescription = generate_description(base, 'barchart', source['a'].tolist(), source['b'].tolist())\n\n# The functions return a dict with the key 'error' if any exceptions were throw and 'res' with the generated description\ndescription = description['res'] if 'res' in description else description['error']\n\nprint(description)\n# This chart has title 'Accessible Chart' ......\n</code></pre>"},{"location":"p3-examples/#create-an-html-with-a-description","title":"Create an HTML with a description","text":"<p>This example shows how to create a HTML with a description generated by our library and put it in an HTML created too by our library.</p> <p></p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz import create_accessible_scheme, generate_description\n\n# Defining chart\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nbase = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n\n# Generate description of the chart\ndescription = generate_description(base, 'barchart', source['a'].tolist(), source['b'].tolist())\n# The functions return a dict with the key 'error' if any exceptions were throw and 'res' with the generated description\ndescription = description['res'] if 'res' in description else description['error']\n\n# We render the description in an HTML \ncreate_accessible_scheme(base, 'proba', description)\n</code></pre>"},{"location":"p3-examples/#modify-an-altair-easeviz-theme","title":"Modify an altair-easeviz theme","text":"<p>This example shows how to change a built-in theme with any of the functions of ModelTheme, you can see more in the API page</p> <p></p> <pre><code>import altair as alt\nimport pandas as pd\nfrom altair_easeviz.models import AccessibleTheme\n\n# Make an instance of a ModelTheme\naccessible_theme = AccessibleTheme()\n# Call any of its function to change a atribute\naccessible_theme.change_mark_color('purple')\n# Enable the theme\nalt.themes.enable('accessible_theme')\n\n# Define the Chart\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre>"},{"location":"p3-examples/#create-a-new-theme","title":"Create a new Theme","text":"<p>This example shows how to create a new theme with our model ModelTheme.</p> <p></p> <pre><code>import altair as alt\nfrom altair_easeviz.models import ModelTheme\nfrom vega_datasets import data\n\n# Create theme (name_theme, text_color, axis_color, mark_color, background_color, show_grid)\npurple_theme = ModelTheme('purple_theme', 'white', 'purple', 'purple', 'black', True)\n\n# Register and enable theme\nalt.themes.register(purple_theme.getName(), purple_theme.get_theme)\nalt.themes.enable(purple_theme.getName())\n\n# draw the chart\ncars = data.cars.url\nchart = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\n</code></pre>"},{"location":"p3-examples/#crate-a-new-theme-with-configmodel","title":"Crate a new Theme with ConfigModel","text":"<p>This example shows how to create a new theme with our ConfigModel and other models. Here we use a model related to the axis configuration.</p> <p></p> <pre><code>import altair as alt\nfrom vega_datasets import data\nfrom altair_easeviz.models import AxisModel, ConfigModel\n\n# Create a new dictionary with the configurations for the axis\naxis_config = AxisModel(labelColor='#e7212f', titleColor='#e7212f').create_axis()\n\n# Create a new dictionary of configurations\nred_text_axis = ConfigModel(axis=axis_config).create_config()\n\n\n# Define the theme by return the dictionary with the configurations\ndef red_axis_theme():\n    return red_text_axis\n\n\n# register the custom theme under a chosen name\nalt.themes.register('red_axis_theme', red_axis_theme)\n\n# enable the newly registered theme\nalt.themes.enable('red_axis_theme')\n\n# draw the chart\ncars = data.cars.url\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\n</code></pre>"},{"location":"p4-release_notes/","title":"Release Notes","text":""},{"location":"p4-release_notes/#version-10-released-jan-162024","title":"Version 1.0 (released Jan 16,2024)","text":"<ul> <li>Deployment 1.0 of Altair-easeviz</li> <li>Initial release of four accessible themes for Vega-Altair</li> <li>Generate description for charts added</li> <li>HTML with accessible functions added</li> <li>Models for creation and customization themes of vega-lite specification added</li> </ul>"},{"location":"p5-about/","title":"About","text":""},{"location":"p5-about/#collaborators","title":"Collaborators","text":"<p>This project was developed alongside Dr. Mireia Ribera as an advisor on topics related to accessibility. </p> <p>The project was developed as the final project for the University of Barcelona in the degree of Computer Science.</p>"},{"location":"p5-about/#roadmap","title":"Roadmap","text":""},{"location":"p5-about/#first-approach","title":"First approach","text":"<p>When starting this project, the first idea that crossed our minds was to create a completely separate branch of Altair where we could configure the internal files of the library. While this may seem like the logical thing to do, it is a monumental and unrealistic job for one person in a short time.</p> <p>The second and more realistic idea was to be able to create a theme that had accessible parameters to be able to visualize and improve the graphics rendered by vega-lite however, this was limited to returning altering the vega-lite specification in a function.</p>"},{"location":"p5-about/#understanding-limitations","title":"Understanding limitations","text":"<p>Our development process centered around two pivotal constraints. Firstly, we aimed to create a library seamlessly integrated with Vega-Altair and its projects, ensuring no disruption to their established workflows. Secondly, we aspired to empower programmers by providing tools that augment the existing capabilities of Vega-Altair.</p> <p>One significant limitation stems from the standard method of saving charts in Vega-Altair, which predominantly employs the canvas tag. While functional, the canvas tag proves more restrictive compared to the SVG tag. Unlike the canvas tag, SVG supports diverse customization options, including fill patterns, custom JavaScript, and detailed descriptions for each graph element.</p> <p>Another notable limitation arises from our commitment to refrain from altering the source code of Vega-Altair and Vega-Lite. Adhering to this principle necessitates our library to gracefully adapt to the offerings of both platforms. Consequently, certain innovative ideas, such as navigating the chart with the keyboard and introducing sound elements to graphics, had to be set aside.</p> <p>In essence, our approach involves a nuanced understanding of these limitations, steering our development decisions towards creating a library that aligns seamlessly with Vega-Altair's existing ecosystem.</p>"},{"location":"p5-about/#the-final-approach","title":"The final approach","text":"<p>So with that in mind, we make one step further, taking inspiration from the Feedzai theme and also applying more organization when creating a theme.</p> <p>The next step then focused on creating models to store values that the Vega-Lite specification expects, then create tokens like color values, font sizes and others and finally typing files to ensure that what the models return to us is what was expected by the API.</p> <p>With all these new ideas is that we created a simple and organized system of models that use correctly can create a simple and robust theme, and with these very same models we create four accessible themes that attempt to create graphics more accessible.</p>"},{"location":"p5-about/#graphs-for-everyone-and-beyond","title":"Graphs for everyone and beyond","text":"<p>The last thing we thought is that since each person is different and may have different needs or tastes, it was to give them simple options so that they can customize the graph in their own way. From this idea came the create_accesible_scheme() function which It is the same as altair.chart.save('test.hml'), since both create an HTML where the chart is rendered, but our function adds options to improve its visualization.</p>"},{"location":"p5-about/#vega-lite-specification","title":"Vega-Lite Specification","text":"<p>All our models are a direct reference to the Vega-Lite specification, although we only took the parameters that we thought were most relevant, but that does not prevent us from adding any other attribute that we have not defined but is present in the Vega-Lite specification.</p>"},{"location":"p5-about/#licensing","title":"Licensing","text":"<p>The altair-easeviz is an open source project with a MIT license, you can use it to expand it or learn how you can improve your charts.</p>"},{"location":"p5-about/#faqs","title":"FAQS","text":""},{"location":"p5-about/#does-this-library-support-layered-repeated-concat-and-facet-charts","title":"Does this library support layered, repeated, concat and facet charts?","text":"<p>While the theme set will have no problems with these kinds of charts, the function create_accesible_scheme() does not fully support this kind of chart specially the options to change the graph size or color scheme.</p>"},{"location":"p5-about/#do-i-need-to-have-r-installed-to-use-the-library","title":"Do I need to have R installed to use the library?","text":"<p>No, only if you want to use the function generate_description().</p>"},{"location":"p5-about/#can-i-expand-or-suggest-new-features-to-the-project","title":"Can I expand or suggest new features to the project?","text":"<p>Yes, is always welcome new features to keep improving.</p>"},{"location":"p5-about/#i-made-new-theme-with-the-models-but-does-not-work","title":"I made new theme with the models but does not work","text":"<p>Remember in order to create a theme is necessary to register then enable it .</p>"},{"location":"p5-about/#registering-the-theme-gave-me-a-error-dict-is-not-function","title":"Registering the theme gave me a error dict is not function","text":"<p>The register expect altair.theme.register('name_theme', a_function()), check what you are passing.</p>"}]}